@page "/device/camera"
@using GabsHybridApp.Shared.Services
@inject ICameraService CameraService

<MudStack Spacing="1" Class="mt-2">
    <MudLoadingButton Loading="_loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="TakePhotoAsync">
        Take Photo
    </MudLoadingButton>
    <MudLoadingButton Loading="_loading" Variant="Variant.Filled" Color="Color.Secondary" OnClick="PickPhotoAsync">
        Browse Photos
    </MudLoadingButton>

    @if (!string.IsNullOrWhiteSpace(_imageDataUrl))
    {
        <MudCard>
            <MudImage Src="@_imageDataUrl" ObjectFit="ObjectFit.Cover" Style="width:100%;height:calc(100vh - 380px);" />
            <MudCardContent>
                <MudText Typo="Typo.caption">@_caption</MudText>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    private string? _imageDataUrl;
    private string? _caption;
    private bool _loading;

    private async Task TakePhotoAsync()
    {
        await WithLoading(async () =>
        {
            var photo = await CameraService.CapturePhotoAsync();
            if (photo is null) return;

            _imageDataUrl = photo.ToDataUrl();
            _caption = photo.FileName ?? photo.Path ?? "Captured photo";
        });
    }

    private async Task PickPhotoAsync()
    {
        await WithLoading(async () =>
        {
            var photo = await CameraService.BrowsePhotoAsync();
            if (photo is null) return;

            _imageDataUrl = photo.ToDataUrl();
            _caption = photo.FileName ?? photo.Path ?? "Selected photo";
        });
    }

    private async Task WithLoading(Func<Task> action)
    {
        _loading = true;
        try { await action(); }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
