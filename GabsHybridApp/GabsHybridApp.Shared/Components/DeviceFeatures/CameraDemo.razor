@inject ICameraService CameraService

<MudStack Spacing="1" Class="mt-2">
    <MudLoadingButton Loading="_loading" Variant="Variant.Filled" Color="Color.Primary" OnClick="TakePhotoAsync">
        Take Photo
    </MudLoadingButton>
    <MudLoadingButton Loading="_loading" Variant="Variant.Filled" Color="Color.Secondary" OnClick="PickPhotoAsync">
        Browse Photos
    </MudLoadingButton>

    @if (!string.IsNullOrWhiteSpace(_imageDataUrl))
    {
        <MudCard>
            <MudImage Src="@_imageDataUrl" ObjectFit="ObjectFit.Cover" Style="width:100%;height:calc(100vh - 380px);" />
            <MudCardContent>
                <MudText Typo="Typo.caption">@LastPhotoPath</MudText>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    public string? LastPhotoPath { get; private set; }
    private string? _imageDataUrl;
    private bool _loading;

    public async Task TakePhotoAsync()
    {
        _loading = true;
        try
        {
            var path = await CameraService.CapturePhotoAsync();
            if (!string.IsNullOrWhiteSpace(path))
            {
                LastPhotoPath = path;
                _imageDataUrl = await ToDataUrlAsync(path);
            }
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task PickPhotoAsync()
    {
        _loading = true;
        try
        {
            var path = await CameraService.BrowsePhotoAsync();
            if (!string.IsNullOrWhiteSpace(path))
            {
                LastPhotoPath = path;
                _imageDataUrl = await ToDataUrlAsync(path);
            }
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private static Task<string> ToDataUrlAsync(string path)
    {
        // Read synchronously is fine for small images; make async if you prefer
        var bytes = File.ReadAllBytes(path);
        var b64 = Convert.ToBase64String(bytes);
        var mime = GetMimeFromExtension(Path.GetExtension(path));
        return Task.FromResult($"data:{mime};base64,{b64}");
    }

    private static string GetMimeFromExtension(string? ext)
        => ext?.ToLowerInvariant() switch
        {
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            _ => "image/jpeg"
        };
}
