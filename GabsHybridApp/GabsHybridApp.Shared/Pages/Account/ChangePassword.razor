@page "/account/changepassword"
@layout Layout.LoginLayout

@inject UserService UserService
@inject IHostCapabilities Caps
@inject NavigationManager Nav
@inject ISnackbar SnackBar

<AntiforgeryToken />

<PageTitle>GabsHybridApp - Change Password</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Change Password</MudText>

<MudText>Hi <strong>@Account.Username</strong>, please change your password <MudLink OnClick="@(() => Nav.NavigateTo(ReturnUrl ?? "/", true))">or skip for now.</MudLink></MudText>

<MudPasswordField @bind-Value="@Account.CurrentPassword" name="@nameof(Account.CurrentPassword)" Label="Current Password" PasswordMode="true" Variant="Variant.Outlined" IconSize="Size.Medium" Class="my-6" />
<MudPasswordField @bind-Value="@Account.NewPassword" name="@nameof(Account.NewPassword)" Label="New Password" PasswordMode="true" Variant="Variant.Outlined" IconSize="Size.Medium" Class="my-6" />
<MudPasswordField @bind-Value="@Account.RetypePassword" name="@nameof(Account.RetypePassword)" Label="Retype New Password" PasswordMode="true" Variant="Variant.Outlined" IconSize="Size.Medium" Class="my-6" />

<MudLoadingButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" LoadingAdornment="Adornment.Start" @bind-Loading="isSubmitting" ButtonType="ButtonType.Submit" OnClick="UpdatePasswordClicked">Update Password</MudLoadingButton>

@code {
    [CascadingParameter]
    Task<AuthenticationState>? AuthState { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    public ChangePasswordDTO Account { get; set; } = new ChangePasswordDTO();

    bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is not null)
        {
            var state = await AuthState;
            Account.Username = state?.User?.Identity?.Name ?? string.Empty;
        }
    }

    void UpdatePasswordClicked()
    {
        if (Account.NewPassword == Account.RetypePassword)
        {
            var success = UserService.ChangePassword(Account.Username, Account.CurrentPassword, Account.NewPassword);
            if (success)
            {
                Nav.NavigateToAfterAuth("/account/login", Caps.RequiresFullReloadAfterAuth);
            }
            else
            {
                clearSnackBars();
                SnackBar.Add("Failed to change password. Please try again.", Severity.Error);
            }
        }
        else
        {
            clearSnackBars();
            SnackBar.Add("Password does not match.", Severity.Warning);
        }
    }

    void clearSnackBars()
    {
        SnackBar.Clear();
        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    public class ChangePasswordDTO
    {
        public string Username { get; set; } = string.Empty;
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string RetypePassword { get; set; } = string.Empty;
    }
}