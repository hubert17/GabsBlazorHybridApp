@inherits LayoutComponentBase
@using GabsHybridApp.Shared.Components
@using GabsHybridApp.Shared.Layout

@implements IAsyncDisposable

@inject IFormFactor FormFactor
@inject IHostCapabilities Caps
@inject ILocalStorageService localStorage
@inject IJSRuntime JS
@inject NavigationManager NavManager

<AntiforgeryToken />

<MyMudThemeProvider IsDarkMode="_isDarkMode" />
<MyMudProviders />

<PageTitle>GabsHybridApp</PageTitle>

<CascadingValue Value="_isDarkMode" Name="IsDarkMode">
<MudLayout>
    <MudDrawer @bind-Open="_drawerOpen"
               ClipMode="IsWebOrDesktop() ? DrawerClipMode.Always : DrawerClipMode.Never"
               Variant="@DrawerVariant.Responsive"
               Elevation="6"
               >
        <NavMenu IsDarkMode="_isDarkMode" OnToggleDarkMode="ToggleDarkMode" />
    </MudDrawer>

    <MudMainContent id="main-content-container" Class="mainlayout-with-bottom-bar-padding">
        <MudContainer Class="@(IsWebOrDesktop() ? "mt-6 mb-6" : "mt-n5")">
            @Body
        </MudContainer>
    </MudMainContent>

    @if (IsWebOrDesktop())
    {
        <MudAppBar Elevation="4">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu"
                               Color="Color.Inherit"
                               Edge="Edge.Start"
                               OnClick="DrawerToggle" />
            </MudHidden>
            <MudText Typo="Typo.h6" Class="ml-3">GabsHybridApp</MudText>

            <MudSpacer />

            <!-- Support Links -->
            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                <MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                         Label="Support"
                         Color="Color.Inherit"
                         Dense="true"
                         AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <MudText Typo="Typo.body2" Class="px-4 py-2"><b>Community</b></MudText>
                    <MudText Typo="Typo.body2" Class="px-4 py-2"><b>Resources</b></MudText>
                    <MudMenuItem Href="https://mudblazor.com/docs/overview" Target="_blank">MudBlazor Documentation</MudMenuItem>
                    <MudMenuItem Href="https://mudblazor.com/getting-started/installation" Target="_blank">Quick-Start Guide</MudMenuItem>
                </MudMenu>
            </MudHidden>

            <!-- 🔔 Notification Panel (handles SignalR & user data internally) -->
            <NotificationPanel IncludeSample="true" NotificationHubUrl="" />

            <!-- 🌙 Dark Mode Toggle -->
            <MudTooltip Text="Toggle Dark Mode">
                <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.Brightness3 : Icons.Material.Filled.WbSunny)"
                               Color="Color.Inherit"
                               OnClick="ToggleDarkMode" />
            </MudTooltip>

            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert>
                <!-- 💻 GitHub Link -->
                <MudTooltip Text="Github">
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                                   Color="Color.Inherit"
                                   Href="https://github.com/hubert17/EdwillJSystem"
                                   Target="_blank" />
                </MudTooltip>
            </MudHidden>

            <!-- 👤 User Menu -->
            <AuthorizeView>
                <MudMenu AnchorOrigin="Origin.TopLeft" Dense Class="mt-1 ml-4" >
                    <ActivatorContent>
                        <MudAvatar Size="Size.Medium">
                            <MudImage Src="https://avatars.githubusercontent.com/u/7923889?v=4" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudListItem T="string" Text="My Account" Icon="@Icons.Material.Outlined.Person" Href="/account/changepassword" />
                        <MudListItem T="string" Text="Settings" Icon="@Icons.Material.Filled.Settings" />
                        <MudListItem T="string" Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick='() => NavManager.NavigateToAfterAuth("/account/logout", Caps.RequiresFullReloadAfterAuth)' />
                        <MudDivider />
                    </ChildContent>
                </MudMenu>
            </AuthorizeView>

        </MudAppBar>
    }
    else
    {
        <MudAppBar Fixed Dense Color="Color.Transparent" Class="pt-2" Elevation="0">
            <MudSpacer />
            <NotificationPanel IncludeSample="true" NotificationHubUrl="" />
            <AuthorizeView>
                <MudMenu AnchorOrigin="Origin.TopLeft" Dense>
                    <ActivatorContent>
                        <MudAvatar Size="Size.Medium" Elevation="2">
                            <MudImage Src="https://avatars.githubusercontent.com/u/7923889?v=4" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudListItem T="string" Text="My Account" Icon="@Icons.Material.Outlined.Person" Href="/account/changepassword" />
                        <MudListItem T="string" Text="Settings" Icon="@Icons.Material.Filled.Settings" />
                        <MudListItem T="string" Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick='() => NavManager.NavigateToAfterAuth("/account/logout", Caps.RequiresFullReloadAfterAuth)' />
                        <MudDivider />
                    </ChildContent>
                </MudMenu>
            </AuthorizeView>
        </MudAppBar>
        <MudAppBar id="bottom-app-bar" Bottom Elevation="2" Dense="false" Class="mainlayout-bottom-appbar d-flex justify-center align-center pa-0">
            <MudNavLink Href="/" Match="NavLinkMatch.All" Class="mud-bottom-nav-item no-ripple">
                <div class="d-flex flex-column align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.House" />
                    <span class="mud-typography-caption my-n1">Home</span>
                </div>
            </MudNavLink>

@*             <MudNavLink Href="/counter" Match="NavLinkMatch.Prefix" Class="mud-bottom-nav-item">
                <div class="d-flex flex-column align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.PlusOne" />
                    <span class="mud-typography-caption my-n1">Counter</span>
                </div>
            </MudNavLink> *@

            <MudNavLink Href="/device-features" Match="NavLinkMatch.Prefix" Class="mud-bottom-nav-item">
                <div class="d-flex flex-column align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.Sensors" />
                    <span class="mud-typography-caption my-n1">Device</span>
                </div>
            </MudNavLink>

            @* Placeholder for the FAB to keep the spacing right *@
            <div style="width: 56px;"></div>

            <MudNavLink Href="/products" Class="mud-bottom-nav-item">
                <div class="d-flex flex-column align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" />
                    <span class="mud-typography-caption my-n1">Products</span>
                </div>
            </MudNavLink>

            <MudNavLink Class="mud-bottom-nav-item" OnClick="DrawerToggle">
                <div class="d-flex flex-column align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.Menu" />
                    <span class="mud-typography-caption my-n1">Menu</span>
                </div>
            </MudNavLink>
        </MudAppBar>

        <MudFab id="main-fab"
                StartIcon="@Icons.Material.Filled.QrCodeScanner"
                Color="Color.Primary"
                Size="Size.Large"
                OnClick="@OnFabClick"
                Class="mainlayout-fab-position mainlayout-fab-sync" />
    }


</MudLayout>
</CascadingValue>

<!-- Global Error UI -->
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;
    private bool IsWebOrDesktop() => FormFactor.GetFormFactor() == "Web" || FormFactor.GetPlatform().Contains("WinUI", StringComparison.OrdinalIgnoreCase);

    private IJSObjectReference? _mod;
    private IJSObjectReference? _handle;

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        StorageConstants.IsDarkMode = _isDarkMode;
        await localStorage.SetItemAsync("isDarkMode", _isDarkMode);
    }

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await localStorage.GetItemAsync<bool>("isDarkMode");
        StorageConstants.IsDarkMode = _isDarkMode;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (!IsWebOrDesktop())
        {
            _mod = await JS.InvokeAsync<IJSObjectReference>("import", "/js/scroll-handler.js");
            _handle = await _mod.InvokeAsync<IJSObjectReference>(
                "registerScrollHandler",
                "",                 // use window scroll (Hybrid)
                "bottom-app-bar",   // bar id
                "main-fab"          // FAB id
            );
        }

    }

    public async ValueTask DisposeAsync()
    {
        if (!IsWebOrDesktop())
        {
            try { if (_handle is not null) await _handle.InvokeVoidAsync("dispose"); }
            catch { }
            if (_mod is not null) await _mod.DisposeAsync();
        }
    }

    void OnFabClick()
    {
        // TODO: your action here
    }
}
